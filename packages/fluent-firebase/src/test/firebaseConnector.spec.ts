// npx jest -i src/Providers/Firebase/firebaseConnector.spec.ts
import { Fluent } from '@goatlab/fluent'
import { dbEntities } from '@goatlab/fluent/src/TypeOrmConnector/test/dbEntities'
import { GoatRepository } from './goat.repository'
import { basicTestSuite } from '@goatlab/fluent/src/TypeOrmConnector/test/basic/basicTestSuite'
import { advancedTestSuite } from '@goatlab/fluent/src/TypeOrmConnector/test/advanced/advancedTestSuite'
import { relationsTestSuite } from '@goatlab/fluent/src/TypeOrmConnector/test/relations/relationsTestsSuite'

import { FirebaseInit } from '../FirebaseInit'
import { TypeOrmRepository } from './typeOrm.repository'
import { UserRepository } from './user.repository'
import { CarsRepository } from './car.repository'
import { RoleRepository } from './roles.repository'
jest.setTimeout(3 * 60 * 1000)

const FIREBASE_SERVICE_ACCOUNT =
  'ewogICAgInR5cGUiOiAic2VydmljZV9hY2NvdW50IiwKICAgICJwcm9qZWN0X2lkIjogImZsdWVudC1mMWQ0YSIsCiAgICAicHJpdmF0ZV9rZXlfaWQiOiAiNTdkMmY5MTE1ZjQ3ZGQ2Yjg0Mjc0ZWM2ZmVhZDA3OGE2YmU5ODcxYiIsCiAgICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUNvSFkvTFlScDdINFZ5XG4waTlyYS9aWjZjNXVYb1R3NWRCUzc4ZXNURWx2UDZwV05XM0RsaEJsOEVLTVNibWcycnVFQ1QzN0k3RDU4azJYXG5XZ1B1Szg2V0RESUhiRHEvUVFuOWQrdUQ1UExnQkprOWRaUGhzd1dweE1pRmNnZWlKQ3ViRHJGUzI2eC8zaVM3XG5HTnJBZ1o5ZkdvUTJIR0pTT00rZ2hRaU5FUHowY2hvNVVkblNwemljdU5pSUlNLzB3VjI2RmltQmQ1UE1nNWcrXG5TdGo0OXpVaFc1ZllSQ3Zub1BGMmk2anlhYjRlYkNtOGtNNUZzNTFzYVRWWGdHNk9XelA3UEF6RjZzQVFhV1paXG5IcWRKK3h3Tk9PNklaZWdBdWhlQmRBQnh6Mit2ZitPSng2UXFycHcvUUM0TlNzRUtRTDg0Q1FTQ3ROVW5YbTFqXG5INWYrcTU5REFnTUJBQUVDZ2dFQUQ2Z0JJT01BSzZzNTFheE1ET2hYQ1o5RDdFb1NmZzl6b1RzQ0VNSmlBYmIwXG56cnZYRWJudCtRV3hET09UZUFRbTBSc1RQSitNVEhBTHJkRmlRRklGYStVNE1Oekd5U2VZeUpReHlNSVBwRnZlXG5uRGRRK0ZuMXZia1NlNVd0QkUvelhQNE1vWXpORHg0ZkNaV1NUdzlEU2xZV2cxRGl1ZDdmUEljUnpzd0s0ckRVXG5Udjd5bGdNanpvV1pkZUpaM2pESFdWWG92QkxWUWtzaUNhY3NpQ0FHNjk3dGg3eGprZFNYQnEwSDRWSzl0TFhUXG5oSmFBNVUxa3Y2ZUJ1R24ycXBteVJlc2R3VVVWYmxuLzhoSGF0anZlNWJEU3E4bURFZXYxbjlub3VnZXBGa2VyXG5HZS9HQk1VOFYyL0xLRUZYa0loYXVheThSa1RLMHpZRXloVjV0QWIxWVFLQmdRRFhTTHBVVjBYR3JkbmRVeXBSXG5QOXdrNm9GaGdBRXJNQmRjc01BSnJ1c21ZWGhwUjJDQUo0YWVCcWZ0TzhDRU5rdmpZbG1ZR1F2NHkrTmhwa2hDXG5PK0hSby9hM05EYVJveWczUldEeHVQVlVVOStrUjBrYUc4RE9HU3lYeUNlajNuV3R4aGhseEtpaWVCM1NudHBOXG5raFJMa2czSjJZNVZCWDlOaCtITzhMZnkyd0tCZ1FESDZSbmZ0TEFqMy8zaGg5cEtjd1FIUVlGSnlEWjFKYVhuXG45NGJOcEJCblpXZnJOQnlwRG9ndkhidDRxL1FDKzVSemNHclRJMXZxNGJpd2k5aXBvTWh0TGI1ZkNFbUFhTnhBXG40dlJKdGNUeFdlVXpkNHhzalM3aDgrT2M5TEVJY1VxVUdZV1V1WnVPN25qbnZ6c2lLSjlwQlhEMGRiVzhnUVdTXG54NHRjLzdnTnVRS0JnUURKbHRpajBYVU5MZzRzS1l3ZXVPV3p5OE9MUVFuWEh4bEJPbUVZc0NxUnJnUEswWU9UXG5mVytZMmpLMCtwYXpOd1NvejVlRnpTNWdzc3NnelV3c2VWWmpzRjE5Lys1NVFZYU8rdkJrYVFXUkNWa0p3NWE0XG5VL1NmQ1FPd3ZVUWhObGFMZWt1dVFCQ0kwbUZhc0ZWSy9kYnpUTGlNb3FPZENhRERRTkk1clQ4U3NRS0JnUUNHXG45TnVOeFRxQURaQWtPQVZxNnppVitXZmh1bkxoSlBoYW9DVDJJTU1lT2p3c2NiTERnbGIzajlmbXdCYnNDSkVRXG5XWjBVU3JPYjNxUkRNeldpVmpQWVdPQkM0YUpWT1BVd0xNY0VGOTBMbmtkNE5rV3JacWgyeTZJbWJKNHk5K0NFXG5HTEt3VTVrcnBkd2pmMXJaVlpsQVdmY0dZWXk5NUZBeDVkbzBmMEh1cVFLQmdEaFhCY3BiUmRPWW5KS1l3dVUyXG5EU0lFeXZTVkZCRnMvRWNnNGo5dmZyZURJdGxYc1VqODdQeGJPNCtVMWZCc2Y2RkxTTHVnajlsMTZURndZWTdlXG55bkdjTnYrbEJ6VTJtbHE1Y0NXd29DaEp6RytuMlg1TGREM0ExNkp3c2EwREdRdmRFSm1BdUpCT05pdzdwellVXG4xeFBLekVnNGtXUU5GeWNxWE8rWE5aay9cbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgICAiY2xpZW50X2VtYWlsIjogImZpcmViYXNlLWFkbWluc2RrLXM0ZGpoQGZsdWVudC1mMWQ0YS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiY2xpZW50X2lkIjogIjExNzkyMzQwNjkwNjE1OTU5NTQ4NSIsCiAgICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICAgInRva2VuX3VyaSI6ICJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsCiAgICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1zNGRqaCU0MGZsdWVudC1mMWQ0YS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIKICB9'

const serviceAccount = JSON.parse(
  Buffer.from(FIREBASE_SERVICE_ACCOUNT!, 'base64').toString('utf8')
)

beforeAll(async () => {
  await FirebaseInit({
    databaseName: 'fluent-f1d4a',
    serviceAccount
  })
  await Fluent.initialize([], dbEntities)
})

afterAll(async () => {
  // Clean all repositories
  const repositories = [
    GoatRepository,
    TypeOrmRepository,
    UserRepository,
    CarsRepository,
    RoleRepository
  ]

  for (const repo of repositories) {
    const r = new repo()
    await r.clear()
  }
})

describe('Execute all basic test Suite', () => {
  basicTestSuite(GoatRepository)
})

describe('Execute all advanced', () => {
  advancedTestSuite(TypeOrmRepository)
})

describe('Execute all relations test suite', () => {
  // relationsTestSuite(UserRepository, CarsRepository, RoleRepository)
})
