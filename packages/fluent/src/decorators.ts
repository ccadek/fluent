import {
  Column,
  ColumnType,
  CreateDateColumn,
  DeleteDateColumn,
  Entity,
  JoinColumn,
  JoinTable,
  ManyToMany as ManyToManyTypeOrm,
  ManyToOne,
  ObjectIdColumn,
  OneToMany,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
  VersionColumn
} from 'typeorm'
import { Collection } from 'fireorm'
import { GraphQLID } from 'graphql'
import {
  ApiProperty,
  HideField,
  ObjectType,
  ApiHideProperty
} from './core/types'
import { Primitives } from './types'
import { applyDecorators } from './core/Nestjs/applyDecorators'
import { Field } from './core/Nestjs/types/decorators/field.decorator'

interface PropertyInterface {
  required?: boolean
  unique?: boolean
  hidden?: boolean
  type?: ColumnType
}

interface EnumProperty {
  enum: any[]
  default?: Primitives
}

export declare type DbEntity<T> = new () => T

interface ManyToManyInterface<T> {
  entity: (type?: any) => DbEntity<T>
  joinTableName: string
  foreignKey: string
  inverseForeignKey: string
}

interface BelongsToInterface<T> {
  entity: (type?: any) => DbEntity<T>
  inverse: string | ((object: T) => any)
  pivotColumnName?: string
}

interface hasManyInterface<T> {
  entity: (type?: any) => DbEntity<T>
  inverse: string | ((object: T) => any)
}

export class DecoratorsClass {
  /**
   *
   * @param spec
   */
  public id(): PropertyDecorator {
    return applyDecorators(
      ObjectIdColumn({type: 'uuid'}) as PropertyDecorator,
      PrimaryGeneratedColumn('uuid') as PropertyDecorator,
      ApiProperty(),
      Field(() => GraphQLID),
      // Column() as PropertyDecorator
      // AutoGeneratedHashKey()
    )
  }

  public mongoId(): PropertyDecorator {
    return applyDecorators(
      ObjectIdColumn() as PropertyDecorator,
      // PrimaryGeneratedColumn('uuid') as PropertyDecorator,
      ApiProperty(),
      Field(() => GraphQLID)
      // AutoGeneratedHashKey()
    )
  }
  /**
   *
   * @param name
   */
  public entity(name: string): ClassDecorator {
    // TODO implement pascal case for this
    const PascalCase = name
    return applyDecorators(
      Entity({ name: PascalCase }),
      ObjectType(),
      Collection(PascalCase) as ClassDecorator
    )
  }
  /**
   *
   * @param params
   */
  public property(params?: PropertyInterface): PropertyDecorator {
    if (params && params.hidden) {
      return applyDecorators(
        HideField(),
        Column({
          select: false,
          nullable: !params.required,
          type: params.type
        }) as PropertyDecorator,
        ApiProperty({
          nullable: !params.required,
          required: !!params.required
        }),
        ApiHideProperty()
      )
    }
    return applyDecorators(
      Column({
        nullable: !params?.required
      }) as PropertyDecorator,
      ApiProperty({
        nullable: !params?.required,
        required: !!params?.required
      }),
      Field()
    )
  }
  /**
   *
   * @param e
   */
  public embed(e: any): PropertyDecorator {
    return applyDecorators(
      Column(type => e) as PropertyDecorator,
      ApiProperty({ type: e })
      // Attribute({ memberType: dynamoEmbed(e) })
    )
  }

  /**
   *
   * @param e
   */
  public embedArray(e: any, params?: PropertyInterface): PropertyDecorator {
    return applyDecorators(
      Column(type => e) as PropertyDecorator,
      ApiProperty({
        isArray: true,
        type: e,
        nullable: !params?.required,
        required: !!params?.required
      })
    )
  }

  /**
   *
   * @param params
   */
  public stringArray(e: any, params?: PropertyInterface): PropertyDecorator {
    return applyDecorators(
      Column({
        type: 'simple-array',
        nullable: !params?.required
      }) as PropertyDecorator,
      ApiProperty({
        type: [e],
        nullable: !params?.required,
        required: !!params?.required
      })
    )
  }

  /**
   *
   * @param e
   * @param params
   */
  public Enum(e: EnumProperty, params?: PropertyInterface): PropertyDecorator {
    return applyDecorators(
      // Attribute(),
      Column({
        type: 'enum',
        enum: e.enum,
        default: e.default,
        nullable: !params?.required
      }) as PropertyDecorator,
      ApiProperty({
        enum: e.enum,
        default: e.default,
        nullable: !params?.required,
        required: !!params?.required
      })
    )
  }

  /**
   *
   * @param e
   */
  public created(e?: any): PropertyDecorator {
    return applyDecorators(CreateDateColumn(), ApiProperty())
  }

  /**
   *
   * @param e
   */
  public updated(e?: any): PropertyDecorator {
    return applyDecorators(UpdateDateColumn(), ApiProperty())
  }

  /**
   *
   * @param e
   */
  public deleted(e?: any): PropertyDecorator {
    return applyDecorators(DeleteDateColumn(), ApiProperty())
  }

  /**
   *
   * @param e
   */
  public version(e?: any): PropertyDecorator {
    return applyDecorators(VersionColumn(), ApiProperty())
  }

  public belongsToMany<T>({
    entity,
    joinTableName,
    foreignKey,
    inverseForeignKey
  }: ManyToManyInterface<T>): PropertyDecorator {
    return applyDecorators(
      ManyToManyTypeOrm(entity),
      JoinTable({
        name: joinTableName,
        joinColumns: [{ name: foreignKey }],
        inverseJoinColumns: [{ name: inverseForeignKey }]
      })
    )
  }

  public belongsTo<T>({
    entity,
    inverse,
    pivotColumnName
  }: BelongsToInterface<T>): PropertyDecorator {
    return applyDecorators(
      ManyToOne(entity, inverse),
      JoinColumn({ name: pivotColumnName, referencedColumnName: 'id' })
    )
  }

  public hasMany<T>({
    entity,
    inverse
  }: hasManyInterface<T>): PropertyDecorator {
    return applyDecorators(OneToMany(entity, inverse))
  }
}

export const f = new DecoratorsClass()
