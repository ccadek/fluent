import { ApiHideProperty, ApiProperty } from '@nestjs/swagger'
/*
import {
  Attribute,
  AutoGeneratedHashKey,
  RangeKey,
  Table,
  VersionAttribute,
  embed as dynamoEmbed
} from 'nestjs-typed-dynamodb'
*/
import {
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  Entity,
  ObjectIdColumn,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
  VersionColumn
} from 'typeorm'
import { Field, HideField, ID, ObjectType } from '@nestjs/graphql'

import { Collection } from 'fireorm'
import { Primitives } from '../../../Providers/types'
import { applyDecorators } from '@nestjs/common'

interface PropertyInterface {
  required?: boolean
  unique?: boolean
  hidden?: boolean
}

interface EnumProperty {
  enum: any[]
  default?: Primitives
}
export const Decorators = (() => {
  /**
   *
   * @param spec
   */
  const id = (isMongo?: boolean): PropertyDecorator => {
    isMongo = false

    if (process.env.MAIN_DATABASE_TYPE === 'mongodb' || isMongo) {
      return applyDecorators(
        ObjectIdColumn() as PropertyDecorator,
        PrimaryGeneratedColumn('uuid') as PropertyDecorator,
        ApiProperty(),
        Field(() => ID),
        Column() as PropertyDecorator
        // AutoGeneratedHashKey()
      )
    }

    return applyDecorators(
      PrimaryGeneratedColumn('uuid') as PropertyDecorator,
      ApiProperty(),
      Field(() => ID),
      Column() as PropertyDecorator
      // AutoGeneratedHashKey()
    )
  }
  /**
   *
   * @param name
   */
  const entity = (name: string): ClassDecorator => {
    // TODO implement pascal case for this
    const PascalCase = name
    return applyDecorators(
      Entity({ name: PascalCase }),
      ObjectType(),
      Collection(PascalCase) as ClassDecorator
    )
  }
  /**
   *
   * @param params
   */
  const property = (params?: PropertyInterface): PropertyDecorator => {
    if (params.hidden) {
      return applyDecorators(
        HideField(),
        Column({
          select: false,
          nullable: !!!params.required
        }) as PropertyDecorator,
        ApiProperty({
          nullable: !!!params.required,
          required: !!params.required
        }),
        ApiHideProperty()
      )
    }
    return applyDecorators(
      Column({
        nullable: !!!params.required
      }) as PropertyDecorator,
      ApiProperty({
        nullable: !!!params.required,
        required: !!params.required
      }),
      Field()
    )
  }
  /**
   *
   * @param e
   */
  const embed = (e: any): PropertyDecorator => {
    return applyDecorators(
      Column(type => e) as PropertyDecorator,
      ApiProperty({ type: e })
      // Attribute({ memberType: dynamoEmbed(e) })
    )
  }
  /**
   *
   * @param params
   */
  const array = (params?: PropertyInterface): PropertyDecorator => {
    return applyDecorators(
      // Attribute(),
      Column({
        type: 'simple-array',
        nullable: !!!params.required
      }) as PropertyDecorator,
      ApiProperty({
        // type: [Number],
        nullable: !!!params.required,
        required: !!params.required
      })
    )
  }
  /**
   *
   * @param e
   * @param params
   */
  const Enum = (
    e: EnumProperty,
    params?: PropertyInterface
  ): PropertyDecorator => {
    return applyDecorators(
      // Attribute(),
      Column({
        type: 'enum',
        enum: e.enum,
        default: e.default,
        nullable: !!!params.required
      }) as PropertyDecorator,
      ApiProperty({
        enum: e.enum,
        default: e.default,
        nullable: !!!params.required,
        required: !!params.required
      })
    )
  }
  /**
   *
   * @param e
   */
  const created = (e?: any): PropertyDecorator => {
    return applyDecorators(CreateDateColumn(), ApiProperty())
  }
  /**
   *
   * @param e
   */
  const updated = (e?: any): PropertyDecorator => {
    return applyDecorators(UpdateDateColumn(), ApiProperty())
  }
  /**
   *
   * @param e
   */
  const deleted = (e?: any): PropertyDecorator => {
    return applyDecorators(DeleteDateColumn(), ApiProperty())
  }
  /**
   *
   * @param e
   */
  const version = (e?: any): PropertyDecorator => {
    return applyDecorators(VersionColumn(), ApiProperty())
  }

  return Object.freeze({
    id,
    entity,
    property,
    embed,
    array,
    Enum,
    created,
    updated,
    version,
    deleted
  })
})()
